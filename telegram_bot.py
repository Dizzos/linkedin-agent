import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from linkedin_agent import LinkedInAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
LINKEDIN_ACCESS_TOKEN = os.getenv("LINKEDIN_ACCESS_TOKEN", "mock_token_test_mode")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USERS = os.getenv("ALLOWED_USERS", "").split(",")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
IS_TEST_MODE = LINKEDIN_ACCESS_TOKEN in ["mock_token_test_mode", "test_mode", "mock"]

if IS_TEST_MODE:
    logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: LinkedIn –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
else:
    logger.info("‚úÖ PROD –†–ï–ñ–ò–ú: LinkedIn –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
agent = LinkedInAgent(
    ANTHROPIC_API_KEY,
    LINKEDIN_ACCESS_TOKEN,
    industry="product management",
    target_audience="Product Managers, Directors of Product, Product Leads"
)


def check_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø"""
    if not ALLOWED_USERS or ALLOWED_USERS[0] == "":
        return True
    return str(user_id) in ALLOWED_USERS


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    if not check_access(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
            f"–í–∞—à ID: {user_id}\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    
    mode_status = "üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú" if IS_TEST_MODE else "‚úÖ PROD –†–ï–ñ–ò–ú"
    
    welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - LinkedIn Content Agent –¥–ª—è –ø—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.

{mode_status}
{"‚ö†Ô∏è LinkedIn –ø—É–±–ª–∏–∫–∞—Ü–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–ê (–ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)" if IS_TEST_MODE else "‚úÖ LinkedIn –ø—É–±–ª–∏–∫–∞—Ü–∏—è –í–ö–õ–Æ–ß–ï–ù–ê"}

üéØ –ß—Ç–æ —è —É–º–µ—é:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏–∑ Mind the Product, Reddit, Hacker News
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è PM –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ –æ–±—Å—É–∂–¥–∞–µ—Ç product community
{"‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã (–≤—ã –∫–æ–ø–∏—Ä—É–µ—Ç–µ –≤—Ä—É—á–Ω—É—é)" if IS_TEST_MODE else "‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ LinkedIn"}

üìù –ö–æ–º–∞–Ω–¥—ã:
/trends - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
/create - –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É
/analyze [—Ç–µ–º–∞] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã
/sources - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
/help - –ü–æ–º–æ—â—å

üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ:
"–ù–∞–π–¥–∏ –≥–æ—Ä—è—á—É—é —Ç–µ–º—É –∏ —Å–æ–∑–¥–∞–π –ø–æ—Å—Ç"
"–ß—Ç–æ –æ–±—Å—É–∂–¥–∞—é—Ç PM –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?"
"""
    await update.message.reply_text(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/trends - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ product —Ç—Ä–µ–Ω–¥—ã
/create - –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
/analyze [—Ç–µ–º–∞] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã
/sources - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
- "–ß—Ç–æ —Å–µ–π—á–∞—Å –æ–±—Å—É–∂–¥–∞—é—Ç –Ω–∞ r/ProductManagement?"
- "–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –ø—Ä–æ AI –≤ product discovery"
- "–î–∞–π —Ç–æ–ø-3 —Ç—Ä–µ–Ω–¥–∞ –Ω–µ–¥–µ–ª–∏ –¥–ª—è PM"
- "–ü—Ä–æ–≤–µ—Ä—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã retention metrics"

{'üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è' if IS_TEST_MODE else '‚úÖ PROD: –ü–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}
"""
    await update.message.reply_text(help_text)


async def trends_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
    user_id = update.effective_user.id
    
    if not check_access(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await update.message.reply_text("üîç –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è PM... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É.")
    
    try:
        response = agent.chat(
            "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ "
            "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π get_product_trends –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–¥."
        )
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in trends command: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    if not check_access(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if IS_TEST_MODE:
        await update.message.reply_text(
            "‚úçÔ∏è –°–æ–∑–¥–∞—é –ø–æ—Å—Ç –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É...\n"
            "üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∂—É –ø–æ—Å—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚è±Ô∏è –ó–∞–π–º—ë—Ç 1-2 –º–∏–Ω—É—Ç—ã."
        )
    else:
        await update.message.reply_text(
            "‚úçÔ∏è –°–æ–∑–¥–∞—é –ø–æ—Å—Ç –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É...\n"
            "‚è±Ô∏è –ó–∞–π–º—ë—Ç 1-2 –º–∏–Ω—É—Ç—ã."
        )
    
    try:
        if IS_TEST_MODE:
            response = agent.chat(
                "–ù–∞–π–¥–∏ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏ –æ–±—Å—É–∂–¥–∞–µ–º—É—é —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. "
                "–°–æ–∑–¥–∞–π –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ –¥–ª—è PM –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏. "
                "–ü–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ LinkedIn. "
                "–ù–ï –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é create_linkedin_post - —è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
            )
        else:
            response = agent.chat(
                "–ù–∞–π–¥–∏ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏ –æ–±—Å—É–∂–¥–∞–µ–º—É—é —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. "
                "–°–æ–∑–¥–∞–π –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ –¥–ª—è PM –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏. "
                "–ü–æ–∫–∞–∂–∏ –º–Ω–µ –ø–æ—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π."
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(response)
        
        if IS_TEST_MODE:
            await update.message.reply_text(
                "\nüìã –ì–û–¢–û–í–û!\n"
                "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç –≤—ã—à–µ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ LinkedIn.\n\n"
                "üí° –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é:\n"
                "1. –ü–æ–ª—É—á–∏—Ç–µ LinkedIn Access Token\n"
                "2. –û–±–Ω–æ–≤–∏—Ç–µ LINKEDIN_ACCESS_TOKEN –Ω–∞ Render"
            )
            
    except Exception as e:
        logger.error(f"Error in create command: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã"""
    user_id = update.effective_user.id
    
    if not check_access(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    topic = " ".join(context.args) if context.args else None
    
    if not topic:
        await update.message.reply_text(
            "‚ùì –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: /analyze AI –≤ product discovery"
        )
        return
    
    await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã: '{topic}'...")
    
    try:
        response = agent.chat(
            f"–ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞ —Ç–µ–º–∞ '{topic}' –¥–ª—è –ø—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. "
            f"–ò—Å–ø–æ–ª—å–∑—É–π –≤–µ–±-–ø–æ–∏—Å–∫ –∏ product –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –î–∞–π –æ—Ü–µ–Ω–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."
        )
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in analyze command: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def sources_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    sources_text = """
üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤:

üì∞ RSS –§–∏–¥—ã:
- Mind the Product
- Product Coalition (Medium)
- Product Talk
- Intercom Blog
- Lenny's Newsletter

üí¨ Reddit Communities:
- r/ProductManagement
- r/product_design
- r/SaaS
- r/startups
- r/userexperience

üî• Hacker News:
- –¢–æ–ø–æ–≤—ã–µ tech –æ–±—Å—É–∂–¥–µ–Ω–∏—è
- Product-related —Ç–µ–º—ã

üåê Web Search:
- Claude –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏

–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ - –ë–ï–°–ü–õ–ê–¢–ù–´–ï! üéâ
"""
    await update.message.reply_text(sources_text)


async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    agent.conversation_history = []
    await update.message.reply_text(
        "üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞!\n"
        "–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞."
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if not check_access(user_id):
        await update.message.reply_text(
            f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—à ID: {user_id}"
        )
        return
    
    user_message = update.message.text
    
    await update.message.chat.send_action(action="typing")
    
    try:
        logger.info(f"User {user_id}: {user_message}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if IS_TEST_MODE and any(word in user_message.lower() for word in ['–æ–ø—É–±–ª–∏–∫—É–π', 'publish', '–ø–æ—Å—Ç']):
            context_message = user_message + "\n\n(–Ø –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ - –ù–ï –≤—ã–∑—ã–≤–∞–π create_linkedin_post, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç)"
        else:
            context_message = user_message
        
        response = agent.chat(context_message)
        
        logger.info(f"Agent response length: {len(response)}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(response)
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if IS_TEST_MODE and any(word in user_message.lower() for word in ['–æ–ø—É–±–ª–∏–∫—É–π', 'publish']):
            await update.message.reply_text(
                "\nüí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
                "–ü–æ—Å—Ç—ã –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é."
            )
            
    except Exception as e:
        logger.error(f"Error handling message: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /reset\n"
            "‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}", exc_info=context.error)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not ANTHROPIC_API_KEY:
        logger.error("‚ùå ANTHROPIC_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    logger.info("=" * 60)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ LinkedIn Agent Telegram Bot")
    logger.info(f"{'üß™ –†–µ–∂–∏–º: –¢–ï–°–¢–û–í–´–ô (mock token)' if IS_TEST_MODE else '‚úÖ –†–µ–∂–∏–º: PRODUCTION'}")
    logger.info("=" * 60)
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("trends", trends_command))
    application.add_handler(CommandHandler("create", create_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CommandHandler("sources", sources_command))
    application.add_handler(CommandHandler("reset", reset_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    if IS_TEST_MODE:
        logger.info("üß™ LinkedIn –ø—É–±–ª–∏–∫–∞—Ü–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–ê - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
